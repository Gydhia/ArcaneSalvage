//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/Scripts/PoopScript/Kader/playermove.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playermove: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playermove()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playermove"",
    ""maps"": [
        {
            ""name"": ""ActionMap"",
            ""id"": ""f9943708-795d-43e0-9373-56f297ca4ae0"",
            ""actions"": [
                {
                    ""name"": ""SpawnGO"",
                    ""type"": ""Button"",
                    ""id"": ""dc545532-7031-4bd1-b702-2bd43cae3c2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpawnECS"",
                    ""type"": ""Button"",
                    ""id"": ""f67f1d22-c863-4260-b2e4-539286652019"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpawnECSWithPooling"",
                    ""type"": ""Button"",
                    ""id"": ""db81e6d0-edb3-4c73-9b96-e837ded49b27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1602861c-439b-4c05-aa71-16e8e9539c23"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnGO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dedecf8c-1630-4ec3-a000-f43d5ba26bcc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnECS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4635729a-739a-4887-b037-75ae5d6fea83"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnECSWithPooling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionMap
        m_ActionMap = asset.FindActionMap("ActionMap", throwIfNotFound: true);
        m_ActionMap_SpawnGO = m_ActionMap.FindAction("SpawnGO", throwIfNotFound: true);
        m_ActionMap_SpawnECS = m_ActionMap.FindAction("SpawnECS", throwIfNotFound: true);
        m_ActionMap_SpawnECSWithPooling = m_ActionMap.FindAction("SpawnECSWithPooling", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMap
    private readonly InputActionMap m_ActionMap;
    private List<IActionMapActions> m_ActionMapActionsCallbackInterfaces = new List<IActionMapActions>();
    private readonly InputAction m_ActionMap_SpawnGO;
    private readonly InputAction m_ActionMap_SpawnECS;
    private readonly InputAction m_ActionMap_SpawnECSWithPooling;
    public struct ActionMapActions
    {
        private @Playermove m_Wrapper;
        public ActionMapActions(@Playermove wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnGO => m_Wrapper.m_ActionMap_SpawnGO;
        public InputAction @SpawnECS => m_Wrapper.m_ActionMap_SpawnECS;
        public InputAction @SpawnECSWithPooling => m_Wrapper.m_ActionMap_SpawnECSWithPooling;
        public InputActionMap Get() { return m_Wrapper.m_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Add(instance);
            @SpawnGO.started += instance.OnSpawnGO;
            @SpawnGO.performed += instance.OnSpawnGO;
            @SpawnGO.canceled += instance.OnSpawnGO;
            @SpawnECS.started += instance.OnSpawnECS;
            @SpawnECS.performed += instance.OnSpawnECS;
            @SpawnECS.canceled += instance.OnSpawnECS;
            @SpawnECSWithPooling.started += instance.OnSpawnECSWithPooling;
            @SpawnECSWithPooling.performed += instance.OnSpawnECSWithPooling;
            @SpawnECSWithPooling.canceled += instance.OnSpawnECSWithPooling;
        }

        private void UnregisterCallbacks(IActionMapActions instance)
        {
            @SpawnGO.started -= instance.OnSpawnGO;
            @SpawnGO.performed -= instance.OnSpawnGO;
            @SpawnGO.canceled -= instance.OnSpawnGO;
            @SpawnECS.started -= instance.OnSpawnECS;
            @SpawnECS.performed -= instance.OnSpawnECS;
            @SpawnECS.canceled -= instance.OnSpawnECS;
            @SpawnECSWithPooling.started -= instance.OnSpawnECSWithPooling;
            @SpawnECSWithPooling.performed -= instance.OnSpawnECSWithPooling;
            @SpawnECSWithPooling.canceled -= instance.OnSpawnECSWithPooling;
        }

        public void RemoveCallbacks(IActionMapActions instance)
        {
            if (m_Wrapper.m_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapActions @ActionMap => new ActionMapActions(this);
    public interface IActionMapActions
    {
        void OnSpawnGO(InputAction.CallbackContext context);
        void OnSpawnECS(InputAction.CallbackContext context);
        void OnSpawnECSWithPooling(InputAction.CallbackContext context);
    }
}
